plugins {
	id 'java-library'
	id 'eclipse'
	id 'idea'
	id 'maven-publish'
	id 'net.neoforged.gradle.userdev' version "${neo_gradle}"
	id "me.modmuss50.mod-publish-plugin" version "0.4.5"
}

def ENV = System.getenv()
version = "${ENV.GITHUB_RUN_NUMBER}" ? "${mod_version}.${ENV.GITHUB_RUN_NUMBER}" : "${mod_version}.9999"
group = project.maven_group

repositories {
	mavenLocal()
	maven {
		url "https://cursemaven.com"
	}
}

base {
	archivesName = project.archives_base_name
}

java.toolchain.languageVersion = JavaLanguageVersion.of(21)

runs {
	configureEach {
		systemProperty 'forge.logging.markers', 'REGISTRIES'
		systemProperty 'forge.logging.console.level', 'debug'
		modSource project.sourceSets.main
	}

	client {
		systemProperty 'forge.enabledGameTestNamespaces', project.archives_base_name
	}

	server {
		systemProperty 'forge.enabledGameTestNamespaces', project.archives_base_name
		programArgument '--nogui'
	}

	data {
		programArguments.addAll '--mod', project.archives_base_name, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
	}
}

sourceSets.main.resources {
	srcDir 'src/generated/resources'
}

dependencies {
	implementation "net.neoforged:neoforge:${neo_version}"
}
tasks.withType(ProcessResources).configureEach {
	var replaceProperties = [
			version: version
	]
	inputs.properties replaceProperties

	filesMatching(['META-INF/neoforge.mods.toml']) {
		expand replaceProperties + [project: project]
	}
}


tasks.withType(JavaCompile).configureEach {
	options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

idea {
	module {
		downloadSources = true
		downloadJavadoc = true
	}
}